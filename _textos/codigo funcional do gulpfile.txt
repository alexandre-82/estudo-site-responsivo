
var gulp = require('gulp'),
sass = require('gulp-sass'),
sourcemaps = require('gulp-sourcemaps'),
browserSync = require('browser-sync').create();

var config = {
    srcPath: 'sass/',
    distPath: 'css/'
  };

  gulp.task('browserSync', function() {
    browserSync.init({ //inicia o server do browsersync
      server: {
        baseDir: './', //define o diretório base
      },
      port: 8080, //define a porta, você pode mudar para a que quiser
      startPath: 'index.html', //define qual é o arquivo que abrirá como padrão quando ele iniciar
    })
  });*/
  
    //gulp.task('sass', function(){
         //a marcação define que iremos pegar todos os arquivos SCSS e Sass da pasta src/sass, inclusive subpastas e seu conteúdo se houverem
        return gulp.src(config.srcPath+'**/*.+(scss|sass))')  // 
      .pipe(sourcemaps.init()) //iniciamos o sourcemap para gravar o MAP para debuging
      .pipe(sass({ //iniciamos o modulo do Sass
        outputStyle: 'compressed' //adicionamos a opção para que o produto final seja comprimido/minificado
      }).on('error', sass.logError)) // Se der erro exibirá um log e criará um arquivo para análise
      .pipe(sourcemaps.write('./')) //Escrevera o sourcemap na mesma pasta ou subpasta do CSS gerado
      .pipe(gulp.dest(config.distPath)) //Irá salvar o arquivo na estrutura equivalente dentro da pasta /dist/css
      .pipe(browserSync.reload({ //ativa o reload da pagina quando terminar de fazer o Sync
      stream: true // (se o servidor estiver iniciado ele dá o reload)
      }));
    });
  
    gulp.task('watch', ['browserSync'], function() { //inicia a watch, colocando junto com ela a browserSync para iniciar o server toda vez que a watch executar
      gulp.watch(config.srcPath+'**/*.+(scss|sass))', ['sass']); //   +(scss|sass)         vigia os arquivos SCSS e Sass na pasta /src/sass, quando um for modificado ele executa a task SASS e ativa o Browsync (por causa da option stream ativa na task [sass])
    });

   gulp.task('default', ['sass', 'watch']);
